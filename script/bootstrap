#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    git_authorname='Kirill Yakovenko'
    git_authoremail='kirill.yakovenko@me.com'

    user " - What is your github author name? [$git_authorname] :"
    read -e git_authorname_input
    if ! [ "$git_authorname_input" == "" ]
    then
      git_authorname=$git_authorname_input
    fi

    user " - What is your github author email? [$git_authoremail] :"
    read -e git_authoremail_input
    if ! [ "$git_authoremail_input" == "" ]
    then
      git_authoremail=$git_authoremail_input
    fi

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

setup_nginx () {
  if [ -f nginx/nginx.conf.symlink ]
  then
    info 'setup nginx'

    nginx_workers='1'
    nginx_user='blia admin'
    nginx_projects="$HOME/Projects"

    user " - How many worker processes? [$nginx_workers] :"
    read -e nginx_workers_input
    if ! [ "$nginx_workers_input" == "" ]
    then
      nginx_workers=$nginx_workers_input
    fi

    user " - What is your username and group? [$nginx_user] :"
    read -e nginx_user_input
    if ! [ "$nginx_user_input" == "" ]
    then
      nginx_user=$nginx_user_input
    fi

    user " - Where is stored your sites? [$nginx_projects] :"
    read -e nginx_projects_input
    if ! [ "$nginx_projects_input" == "" ]
    then
      nginx_projects=$nginx_projects_input
    fi
    echo $nginx_projects
    sed -e "s/WORKERS/$nginx_workers/g" -e "s/USER/$nginx_user/g" -e "s#PROJECTS#$nginx_projects#g" -e "s#DOTFILES_ROOT#$DOTFILES_ROOT#g" nginx/nginx.conf.symlink.dist > nginx/nginx.conf.symlink
    sed -e "s#PROJECTS#$nginx_projects#g" -e "s#HOME#$HOME#g" nginx/blia.nginx.plist.dist > nginx/blia.nginx.plist

    success 'nginx'
  fi
}


link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
setup_nginx
install_dotfiles

#If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if source bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
